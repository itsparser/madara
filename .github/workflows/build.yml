name: Task - Build Madara
on:
  workflow_dispatch:
  workflow_call:
jobs:
  build:
    permissions:
      pull-requests: write
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: Swatinem/rust-cache@v2
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.81
      - name: Setup build deps
        run: |
          sudo apt-get update
          sudo apt-get install -y clang llvm libudev-dev protobuf-compiler
      - uses: rui314/setup-mold@v1
      - uses: software-mansion/setup-scarb@v1
        with:
          scarb-version: "2.8.2"
      - uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly
      - name: Build
        # also build test contracts for js-tests.
        run: |
          export GIT_COMMIT_HASH=$GITHUB_SHA
          cargo build --release --bin madara
          cargo build --release -p m-cairo-test-contracts
      # Generate a unique hash for the Madara binary that includes both content and timestamp
      # This ensures we can track specific builds and always get a fresh cache
      - name: Generate binary hash
        id: binary_hash
        run: |
          # Path to the compiled Madara binary
          BINARY_PATH=./target/release/madara
          # Get current Unix timestamp for uniqueness
          TIMESTAMP=$(date +%s)
          # Create hash by combining timestamp and binary content
          HASH=$(echo "$TIMESTAMP" | cat - $BINARY_PATH | sha256sum | awk '{ print $1 }')
          # Set output for use in subsequent steps
          echo "hash=$HASH" >> $GITHUB_OUTPUT
          # Save hash to file for artifact sharing
          echo "$HASH" > binary_hash.txt
          echo "Hash of the binary is: $HASH (with timestamp: $TIMESTAMP)"
      - name: Upload hash as artifact
        uses: actions/upload-artifact@v4
        with:
          name: binary-hash
          path: binary_hash.txt
          retention-days: 1
      - name: Cache Madara binary
        uses: actions/cache@v3
        with:
          path: target/release/madara
          key: ${{ runner.os }}-madara-bin-${{ steps.binary_hash.outputs.hash }}

      # Generate a unique hash for Cairo artifacts that includes both content and timestamp
      # This ensures consistent Cairo artifacts between workflows while maintaining freshness
      - name: Generate Cairo artifacts hash
        id: cairo_hash
        run: |
          # Get current Unix timestamp for uniqueness
          TIMESTAMP=$(date +%s)
          # Generate hash of all files in cairo/target directory
          FILES_HASH=$(find cairo/target -type f -exec sha256sum {} \; | sort | sha256sum | awk '{ print $1 }')
          # Combine timestamp with files hash for unique identifier
          HASH=$(echo "$TIMESTAMP $FILES_HASH" | sha256sum | awk '{ print $1 }')
          # Set output for use in subsequent steps
          echo "hash=$HASH" >> $GITHUB_OUTPUT
          # Save hash to file for artifact sharing
          echo "$HASH" > cairo_artifacts_hash.txt
          echo "Hash of Cairo artifacts is: $HASH (with timestamp: $TIMESTAMP)"
      - name: Upload Cairo artifacts hash
        uses: actions/upload-artifact@v4
        with:
          name: cairo-artifacts-hash
          path: cairo_artifacts_hash.txt
          retention-days: 1
      - name: Cache Cairo build artifacts
        uses: actions/cache@v3
        with:
          path: cairo/target
          key: ${{ runner.os }}-madara-cairo-${{ steps.cairo_hash.outputs.hash }}
